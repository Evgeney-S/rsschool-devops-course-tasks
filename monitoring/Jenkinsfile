pipeline {
    agent {
        kubernetes {
            yamlFile 'monitoring/jenkins/monitoring-agent.yaml'
            defaultContainer 'helm'
        }
    }

    environment {
        NAMESPACE = "monitoring"
    }

    stages {
        stage('Create namespace') {
            steps {
                sh 'kubectl create ns $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -'
            }
        }

        stage('Install Prometheus') {
            steps {
                sh '''
                    helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
                    helm repo update
                    helm upgrade --install prometheus prometheus-community/prometheus \
                        -n $NAMESPACE \
                        -f monitoring/helm/prometheus-values.yaml
                '''
            }
        }

        stage('Install Grafana') {
            steps {
                container('helm') {
                    withCredentials([string(credentialsId: 'grafana-admin-password', variable: 'GRAFANA_PASSWORD')]) {
                        sh '''
                            echo "Creating grafana-admin Kubernetes secret from Jenkins credentials..."

                            kubectl create secret generic grafana-admin \
                                --from-literal=admin-password="${GRAFANA_PASSWORD}" \
                                -n monitoring \
                                --dry-run=client -o yaml | kubectl apply -f -

                            echo "Installing Grafana via Helm..."

                            helm upgrade --install grafana grafana/grafana \
                                -n monitoring \
                                -f monitoring/helm/grafana-values.yaml \
                                --set admin.existingSecret=grafana-admin \
                                --set admin.user=admin

                            echo "Waiting for Grafana pod to be ready..."
                            kubectl rollout status deployment grafana -n monitoring --timeout=120s

                            echo "Grafana installed successfully."
                        '''
                    }
                }
            }
        }

        stage('Apply Grafana configmaps') {
            steps {
                container('helm') {
                    sh '''
                        echo "Applying Grafana alert rules configmap..."
                        kubectl create configmap grafana-alerts \
                            --from-file=monitoring/alerts/cpu-ram-alerts.yaml \
                            -n $NAMESPACE \
                            --dry-run=client -o yaml | kubectl apply -f -

                        echo "Applying Grafana contact points configmap..."
                        kubectl create configmap grafana-contact \
                            --from-file=monitoring/notifiers/smtp-contact.yaml \
                            -n $NAMESPACE \
                            --dry-run=client -o yaml | kubectl apply -f -
                    '''
                }
            }
        }

        stage('Output Access Info') {
            steps {
                script {
                    def nodePort = sh(script: "kubectl get svc -n $NAMESPACE grafana -o jsonpath='{.spec.ports[0].nodePort}'", returnStdout: true).trim()
                    echo "Grafana NodePort: ${nodePort}"
                    echo "Access Grafana via: http://localhost:${nodePort}"
                    echo "You may need to run: kubectl port-forward svc/grafana 3000:3000 -n monitoring"
                }
            }
        }
    }
}
