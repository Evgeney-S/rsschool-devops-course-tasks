pipeline {
    agent {
        kubernetes {
            yamlFile 'monitoring/jenkins/monitoring-agent.yaml'
            defaultContainer 'helm'
        }
    }

    environment {
        NAMESPACE           = "monitoring"
        GRAFANA_SMTP_USER   = credentials('grafana-smtp-username')
        GRAFANA_SMTP_PASS   = credentials('grafana-smtp-password')
        GRAFANA_SMTP_FROM   = credentials('grafana-from-address')
        GRAFANA_ALERT_EMAIL = credentials('grafana-to-address')
    }

    stages {
        stage('Create namespace') {
            steps {
                sh 'kubectl create ns $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -'
            }
        }

        stage('Install Prometheus') {
            steps {
                sh '''
                    helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
                    helm repo update
                    helm upgrade --install prometheus prometheus-community/prometheus \
                        -n $NAMESPACE \
                        -f monitoring/helm/prometheus-values.yaml
                '''
            }
        }

        stage('Create Grafana admin secret') {
            steps {
                withCredentials([string(credentialsId: 'grafana-admin-password', variable: 'GRAFANA_PASSWORD')]) {
                    sh '''
                        kubectl create secret generic grafana-admin \
                            --from-literal=admin-password="${GRAFANA_PASSWORD}" \
                            -n $NAMESPACE \
                            --dry-run=client -o yaml | kubectl apply -f -
                    '''
                }
            }
        }

        stage('Check SMTP credentials') {
            steps {
                sh '''
                    error=0
                    if [ -z "$GRAFANA_SMTP_USER" ]; then
                        echo "❌ GRAFANA_SMTP_USER variable is empty!"
                        error=1
                    fi
                    if [ -z "$GRAFANA_SMTP_PASS" ]; then
                        echo "❌ GRAFANA_SMTP_PASS variable is empty!"
                        error=1
                    fi
                    if [ -z "$GRAFANA_SMTP_FROM" ]; then
                        echo "❌ GRAFANA_SMTP_FROM variable is empty!"
                        error=1
                    fi
                    if [ $error -ne 0 ]; then
                        echo "Please set the required environment variables in Jenkins credentials."
                        exit 1
                    else
                        echo "✅ All required SMTP credentials are set."
                    fi
                '''
            }
        }

        stage('Install Grafana') {
            steps {
                sh '''
                    helm repo add grafana https://grafana.github.io/helm-charts
                    helm repo update

                    helm upgrade --install grafana grafana/grafana \
                        -n $NAMESPACE \
                        -f monitoring/helm/grafana-values.yaml \
                        --set smtp.user=$GRAFANA_SMTP_USER \
                        --set smtp.password=$GRAFANA_SMTP_PASS \
                        --set smtp.from=$GRAFANA_SMTP_FROM
                '''
            }
        }

        stage('Apply Grafana configmaps') {
            steps {
                sh '''
                    echo "$GRAFANA_ALERT_EMAIL" > /tmp/alert-email.txt

                    kubectl create configmap grafana-contact \
                        --from-file=monitoring/notifiers/smtp-contact.yaml \
                        --from-file=email.txt=/tmp/alert-email.txt \
                        -n $NAMESPACE \
                        --dry-run=client -o yaml | kubectl apply -f -

                    kubectl create configmap grafana-alerts \
                        --from-file=monitoring/alerts/cpu-ram-alerts.yaml \
                        -n $NAMESPACE \
                        --dry-run=client -o yaml | kubectl apply -f -
                '''
            }
        }

        stage('Output Access Info') {
            steps {
                script {
                    def nodePort = sh(script: "kubectl get svc -n $NAMESPACE grafana -o jsonpath='{.spec.ports[0].nodePort}'", returnStdout: true).trim()
                    echo "Grafana NodePort: ${nodePort}"
                    echo "Access Grafana via: http://localhost:${nodePort}"
                    echo "You may need to run: kubectl port-forward svc/grafana 3000:3000 -n monitoring"
                }
            }
        }
    }
}
