Started by user Jenkins Admin
Obtained Jenkinsfile from git https://github.com/Evgeney-S/rsschool-devops-course-tasks.git
[Pipeline] Start of Pipeline
[Pipeline] podTemplate
[Pipeline] {
[Pipeline] node
Created Pod: kubernetes jenkins/flask-app-deploy-34-95z6r-9sh7g-pp21s
[PodInfo] jenkins/flask-app-deploy-34-95z6r-9sh7g-pp21s
	Container [env] waiting [ContainerCreating] No message
	Container [jnlp] waiting [ContainerCreating] No message
	Pod [Pending][ContainersNotReady] containers with unready status: [env jnlp]
Agent flask-app-deploy-34-95z6r-9sh7g-pp21s is provisioned from template Flask-app-deploy_34-95z6r-9sh7g
---
apiVersion: "v1"
kind: "Pod"
metadata:
  annotations:
    kubernetes.jenkins.io/last-refresh: "1753118107252"
    buildUrl: "http://jenkins.jenkins.svc.cluster.local:8080/job/Flask-app-deploy/34/"
    runUrl: "job/Flask-app-deploy/34/"
  labels:
    jenkins/jenkins-jenkins-agent: "true"
    jenkins/label-digest: "b40364bd403720f01bcb451e1e2ef613688212fb"
    jenkins/label: "Flask-app-deploy_34-95z6r"
    kubernetes.jenkins.io/controller: "http___jenkins_jenkins_svc_cluster_local_8080x"
  name: "flask-app-deploy-34-95z6r-9sh7g-pp21s"
  namespace: "jenkins"
spec:
  containers:
  - command:
    - "cat"
    image: "evgeneys/flask-app-build-env:latest"
    name: "env"
    tty: true
    volumeMounts:
    - mountPath: "/var/run/docker.sock"
      name: "docker-sock"
    - mountPath: "/home/jenkins/agent"
      name: "workspace-volume"
      readOnly: false
  - env:
    - name: "JENKINS_SECRET"
      value: "********"
    - name: "JENKINS_TUNNEL"
      value: "jenkins-agent.jenkins.svc.cluster.local:50000"
    - name: "JENKINS_AGENT_NAME"
      value: "flask-app-deploy-34-95z6r-9sh7g-pp21s"
    - name: "REMOTING_OPTS"
      value: "-noReconnectAfter 1d"
    - name: "JENKINS_NAME"
      value: "flask-app-deploy-34-95z6r-9sh7g-pp21s"
    - name: "JENKINS_AGENT_WORKDIR"
      value: "/home/jenkins/agent"
    - name: "JENKINS_URL"
      value: "http://jenkins.jenkins.svc.cluster.local:8080/"
    image: "jenkins/inbound-agent:3309.v27b_9314fd1a_4-1"
    name: "jnlp"
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
    volumeMounts:
    - mountPath: "/home/jenkins/agent"
      name: "workspace-volume"
      readOnly: false
  nodeSelector:
    kubernetes.io/os: "linux"
  restartPolicy: "Never"
  volumes:
  - hostPath:
      path: "/var/run/docker.sock"
    name: "docker-sock"
  - emptyDir:
      medium: ""
    name: "workspace-volume"

Running on flask-app-deploy-34-95z6r-9sh7g-pp21s in /home/jenkins/agent/workspace/Flask-app-deploy
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Declarative: Checkout SCM)
[Pipeline] checkout
Selected Git installation does not exist. Using Default
The recommended git tool is: NONE
No credentials specified
Cloning the remote Git repository
Cloning repository https://github.com/Evgeney-S/rsschool-devops-course-tasks.git
 > git init /home/jenkins/agent/workspace/Flask-app-deploy # timeout=10
Fetching upstream changes from https://github.com/Evgeney-S/rsschool-devops-course-tasks.git
 > git --version # timeout=10
 > git --version # 'git version 2.39.5'
 > git fetch --tags --force --progress -- https://github.com/Evgeney-S/rsschool-devops-course-tasks.git +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git config remote.origin.url https://github.com/Evgeney-S/rsschool-devops-course-tasks.git # timeout=10
 > git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/* # timeout=10
Avoid second fetch
Checking out Revision 8a2648d23a7f27c51958e3516e65905df898ef51 (refs/remotes/origin/task-6)
Commit message: "Small Jenkinsfile fix"
 > git rev-parse refs/remotes/origin/task-6^{commit} # timeout=10
 > git config core.sparsecheckout # timeout=10
 > git checkout -f 8a2648d23a7f27c51958e3516e65905df898ef51 # timeout=10
 > git rev-list --no-walk 8a2648d23a7f27c51958e3516e65905df898ef51 # timeout=10
[Pipeline] }
[Pipeline] // stage
[Pipeline] withEnv
[Pipeline] {
[Pipeline] container
[Pipeline] {
[Pipeline] withEnv
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Install dependencies)
[Pipeline] echo
⏩ Application build (installing dependencies)
[Pipeline] dir
Running in /home/jenkins/agent/workspace/Flask-app-deploy/flask-app
[Pipeline] {
[Pipeline] sh
+ pip install -r requirements.txt
Collecting Flask (from -r requirements.txt (line 1))
  Downloading flask-3.1.1-py3-none-any.whl.metadata (3.0 kB)
Collecting blinker>=1.9.0 (from Flask->-r requirements.txt (line 1))
  Downloading blinker-1.9.0-py3-none-any.whl.metadata (1.6 kB)
Collecting click>=8.1.3 (from Flask->-r requirements.txt (line 1))
  Downloading click-8.2.1-py3-none-any.whl.metadata (2.5 kB)
Collecting itsdangerous>=2.2.0 (from Flask->-r requirements.txt (line 1))
  Downloading itsdangerous-2.2.0-py3-none-any.whl.metadata (1.9 kB)
Collecting jinja2>=3.1.2 (from Flask->-r requirements.txt (line 1))
  Downloading jinja2-3.1.6-py3-none-any.whl.metadata (2.9 kB)
Collecting markupsafe>=2.1.1 (from Flask->-r requirements.txt (line 1))
  Downloading MarkupSafe-3.0.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.0 kB)
Collecting werkzeug>=3.1.0 (from Flask->-r requirements.txt (line 1))
  Downloading werkzeug-3.1.3-py3-none-any.whl.metadata (3.7 kB)
Downloading flask-3.1.1-py3-none-any.whl (103 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 103.3/103.3 kB 592.9 kB/s eta 0:00:00
Downloading blinker-1.9.0-py3-none-any.whl (8.5 kB)
Downloading click-8.2.1-py3-none-any.whl (102 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 102.2/102.2 kB 775.0 kB/s eta 0:00:00
Downloading itsdangerous-2.2.0-py3-none-any.whl (16 kB)
Downloading jinja2-3.1.6-py3-none-any.whl (134 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 134.9/134.9 kB 1.3 MB/s eta 0:00:00
Downloading MarkupSafe-3.0.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (23 kB)
Downloading werkzeug-3.1.3-py3-none-any.whl (224 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 224.5/224.5 kB 3.1 MB/s eta 0:00:00
Installing collected packages: markupsafe, itsdangerous, click, blinker, werkzeug, jinja2, Flask
Successfully installed Flask-3.1.1 blinker-1.9.0 click-8.2.1 itsdangerous-2.2.0 jinja2-3.1.6 markupsafe-3.0.2 werkzeug-3.1.3
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv

[notice] A new release of pip is available: 24.0 -> 25.1.1
[notice] To update, run: pip install --upgrade pip
+ set +x
✅ Application build completed successfully (dependencies installed)!
[Pipeline] }
[Pipeline] // dir
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Unit Test)
[Pipeline] echo
⏩ Unit tests
[Pipeline] dir
Running in /home/jenkins/agent/workspace/Flask-app-deploy/flask-app
[Pipeline] {
[Pipeline] sh
+ python -m unittest test_main.py
..
----------------------------------------------------------------------
Ran 2 tests in 0.006s

OK
+ set +x
✅ Unit tests passed successfully!
[Pipeline] }
[Pipeline] // dir
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (SonarQube Analysis)
[Pipeline] echo
⏩ SonarQube analysis
[Pipeline] container
[Pipeline] {
[Pipeline] withSonarQubeEnv
Injecting SonarQube environment variables using the configuration: sonarqube
[Pipeline] {
[Pipeline] dir
Running in /home/jenkins/agent/workspace/Flask-app-deploy/flask-app
[Pipeline] {
[Pipeline] sh
+ sonar-scanner -Dsonar.projectKey=flask-app -Dsonar.sources=. -Dsonar.host.url=http://sonarqube-sonarqube.sonarqube.svc.cluster.local:9000 -Dsonar.login=******
INFO: Scanner configuration file: /opt/sonar-scanner-5.0.1.3006-linux/conf/sonar-scanner.properties
INFO: Project root configuration file: NONE
INFO: SonarScanner 5.0.1.3006
INFO: Java 17.0.7 Eclipse Adoptium (64-bit)
INFO: Linux 6.6.87.2-microsoft-standard-WSL2 amd64
INFO: User cache: /root/.sonar/cache
INFO: Analyzing on SonarQube server 25.5.0.107428
INFO: Default locale: "en", source code encoding: "UTF-8" (analysis is platform dependent)
INFO: Load global settings
INFO: Load global settings (done) | time=159ms
INFO: Server id: EA8D9556-AZgkbcNaLgCr2ZPRGRiE
INFO: Loading required plugins
INFO: Load plugins index
INFO: Load plugins index (done) | time=51ms
INFO: Load/download plugins
INFO: Load/download plugins (done) | time=1522ms
INFO: Process project properties
INFO: Process project properties (done) | time=178ms
INFO: Project key: flask-app
INFO: Base dir: /home/jenkins/agent/workspace/Flask-app-deploy/flask-app
INFO: Working dir: /home/jenkins/agent/workspace/Flask-app-deploy/flask-app/.scannerwork
INFO: Load project settings for component key: 'flask-app'
INFO: Load project settings for component key: 'flask-app' (done) | time=181ms
INFO: Load quality profiles
INFO: Load quality profiles (done) | time=752ms
INFO: Auto-configuring with CI 'Jenkins'
INFO: Load active rules
INFO: Load active rules (done) | time=1443ms
INFO: Load analysis cache
INFO: Load analysis cache (1.7 kB) | time=40ms
WARN: The property 'sonar.login' is deprecated and will be removed in the future. Please use the 'sonar.token' property instead when passing a token.
INFO: Preprocessing files...
INFO: 2 languages detected in 7 preprocessed files
INFO: 0 files ignored because of scm ignore settings
INFO: Loading plugins for detected languages
INFO: Load/download plugins
INFO: Load/download plugins (done) | time=1668ms
INFO: Load project repositories
INFO: Load project repositories (done) | time=409ms
INFO: Indexing files...
INFO: Project configuration:
INFO: 7 files indexed
INFO: Quality profile for docker: Sonar way
INFO: Quality profile for py: Sonar way
INFO: ------------- Run sensors on module flask-app
INFO: Load metrics repository
INFO: Load metrics repository (done) | time=92ms
INFO: Sensor JaCoCo XML Report Importer [jacoco]
INFO: 'sonar.coverage.jacoco.xmlReportPaths' is not defined. Using default locations: target/site/jacoco/jacoco.xml,target/site/jacoco-it/jacoco.xml,build/reports/jacoco/test/jacocoTestReport.xml
INFO: No report imported, no coverage information will be imported by JaCoCo XML Report Importer
INFO: Sensor JaCoCo XML Report Importer [jacoco] (done) | time=33ms
INFO: Sensor Java Config Sensor [iac]
INFO: 0 source files to be analyzed
INFO: 0/0 source files have been analyzed
INFO: Sensor Java Config Sensor [iac] (done) | time=212ms
INFO: Sensor Python Sensor [python]
WARN: Your code is analyzed as compatible with all Python 3 versions by default. You can get a more precise analysis by setting the exact Python version in your configuration via the parameter "sonar.python.version"
INFO: Starting global symbols computation
INFO: 2 source files to be analyzed
INFO: 2/2 source files have been analyzed
INFO: Starting rules execution
INFO: 2 source files to be analyzed
INFO: 2/2 source files have been analyzed
INFO: The Python analyzer was able to leverage cached data from previous analyses for 0 out of 2 files. These files were not parsed.
INFO: Sensor Python Sensor [python] (done) | time=4921ms
INFO: Sensor Cobertura Sensor for Python coverage [python]
INFO: Sensor Cobertura Sensor for Python coverage [python] (done) | time=24ms
INFO: Sensor PythonXUnitSensor [python]
INFO: Sensor PythonXUnitSensor [python] (done) | time=17ms
INFO: Sensor Python Dependency Sensor [python]
INFO: Sensor Python Dependency Sensor [python] (done) | time=37ms
INFO: Sensor IaC Docker Sensor [iac]
INFO: 2 source files to be analyzed
INFO: 2/2 source files have been analyzed
INFO: Sensor IaC Docker Sensor [iac] (done) | time=1680ms
INFO: Sensor TextAndSecretsSensor [text]
INFO: Available processors: 4
INFO: Using 4 threads for analysis.
INFO: The property "sonar.tests" is not set. To improve the analysis accuracy, we categorize a file as a test file if any of the following is true:
  * The filename starts with "test"
  * The filename contains "test." or "tests."
  * Any directory in the file path is named: "doc", "docs", "test" or "tests"
  * Any directory in the file path has a name ending in "test" or "tests"

INFO: Using git CLI to retrieve untracked files
WARN: Analyzing only language associated files, make sure to run the analysis inside a git repository to make use of inclusions specified via "sonar.text.inclusions"
INFO: 4 source files to be analyzed
INFO: 4/4 source files have been analyzed
INFO: Sensor TextAndSecretsSensor [text] (done) | time=2799ms
INFO: ------------- Run sensors on project
INFO: Sensor Zero Coverage Sensor
INFO: Sensor Zero Coverage Sensor (done) | time=1261ms
INFO: ------------- Gather SCA dependencies on project
INFO: Dependency analysis skipped
INFO: CPD Executor Calculating CPD for 2 files
INFO: CPD Executor CPD calculation finished (done) | time=1855ms
INFO: SCM revision ID '8a2648d23a7f27c51958e3516e65905df898ef51'
INFO: Analysis report generated in 7858ms, dir size=244.7 kB
INFO: Analysis report compressed in 1547ms, zip size=33.2 kB
INFO: Analysis report uploaded in 3713ms
INFO: ANALYSIS SUCCESSFUL, you can find the results at: http://sonarqube-sonarqube.sonarqube.svc.cluster.local:9000/dashboard?id=flask-app
INFO: Note that you will be able to access the updated dashboard once the server has processed the submitted analysis report
INFO: More about the report processing at http://sonarqube-sonarqube.sonarqube.svc.cluster.local:9000/api/ce/task?id=0e7a02d0-546b-40ad-8971-afc4a025e981
INFO: Analysis total time: 53.692 s
INFO: ------------------------------------------------------------------------
INFO: EXECUTION SUCCESS
INFO: ------------------------------------------------------------------------
INFO: Total time: 1:03.020s
INFO: Final Memory: 22M/80M
INFO: ------------------------------------------------------------------------
[Pipeline] }
[Pipeline] // dir
[Pipeline] }
[Pipeline] // withSonarQubeEnv
[Pipeline] }
[Pipeline] // container
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Docker Build)
[Pipeline] echo
⏩ Docker image building
[Pipeline] container
[Pipeline] {
[Pipeline] sh
+ docker build -t evgeneys/flask-app:latest flask-app
#1 [internal] load build definition from Dockerfile
#1 sha256:09920bdd0ba5f5ee7aebd2ec4a5d0878fd19674183eaa47bd8d67de801e5baa4
#1 transferring dockerfile:
#1 transferring dockerfile: 215B 0.0s done
#1 DONE 0.2s

#2 [internal] load metadata for docker.io/library/python:3.11-slim
#2 sha256:7fd88e7eb08a3ac0de427c694acb0199f4ed840466682c40d68abccca25d73ae
#2 DONE 1.5s

#3 [internal] load .dockerignore
#3 sha256:b1b0418d8cfbce4104ca36ecde21b64ce1923f6659b58c2a34f16ea85748f1d9
#3 transferring context: 2B done
#3 DONE 0.1s

#9 [1/5] FROM docker.io/library/python:3.11-slim@sha256:139020233cc412efe4c8135b0efe1c7569dc8b28ddd88bddb109b764f8977e30
#9 sha256:af17f89e016239ae966829a6ed0fd70d355b5279afbcac75aa677b32049105ec
#9 DONE 0.0s

#7 [internal] load build context
#7 sha256:b8a75b897f729d735746cea4e918be600afbebd9e32ddfef3b9827e4ad6b376c
#7 transferring context: 431B 0.0s done
#7 DONE 0.2s

#8 [2/5] WORKDIR /app
#8 sha256:1719131ea8a73c524181fe9358e331e6784c7e755bacff881669c4b9da5f31ac
#8 CACHED

#6 [3/5] COPY requirements.txt ./
#6 sha256:fcde7c8c96906e259787ff44e12215628b2d3b429654e0fdcd6cb6d2f3cf7928
#6 CACHED

#5 [4/5] RUN pip install --no-cache-dir -r requirements.txt
#5 sha256:1cd3d7102db19452b1d01437b209d7162555dae786266684797bb5088a8540bb
#5 CACHED

#4 [5/5] COPY main.py ./
#4 sha256:1c61ff560ba8f635cc4eafb0a410a0f16ef3261e2b63d181fd5a0c546b55797e
#4 CACHED

#10 exporting to image
#10 sha256:06aa40b3bc5c4a5edbd2deeef16f891930a1267353a09caf345e88268f7e5a66
#10 exporting layers done
#10 writing image sha256:daa156a2044412bb6145fc4ad2c5bf1ed41fdefaf5ffee1f6da09433438fb974 0.0s done
#10 naming to docker.io/evgeneys/flask-app:latest 0.0s done
#10 DONE 0.1s
+ set +x
✅ Docker image built successfully!
[Pipeline] }
[Pipeline] // container
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Push to Docker Hub)
[Pipeline] echo
⏩ Pushing Docker image to Docker Hub
[Pipeline] container
[Pipeline] {
[Pipeline] withCredentials
Masking supported pattern matches of $DOCKER_PASSWORD
[Pipeline] {
[Pipeline] sh
+ echo ****
+ docker login -u evgeneys --password-stdin
WARNING! Your password will be stored unencrypted in /root/.docker/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/#credentials-store

Login Succeeded
+ docker push evgeneys/flask-app:latest
The push refers to repository [docker.io/evgeneys/flask-app]
5ebf63869ae6: Preparing
b9acbfdabbaa: Preparing
1e66611fed36: Preparing
aa137e47b81f: Preparing
546c6f4e2f2c: Preparing
a1061f722fb2: Preparing
e5b65e4c6bda: Preparing
1bb35e8b4de1: Preparing
a1061f722fb2: Waiting
e5b65e4c6bda: Waiting
1bb35e8b4de1: Waiting
1e66611fed36: Layer already exists
5ebf63869ae6: Layer already exists
546c6f4e2f2c: Layer already exists
b9acbfdabbaa: Layer already exists
aa137e47b81f: Layer already exists
a1061f722fb2: Layer already exists
1bb35e8b4de1: Layer already exists
e5b65e4c6bda: Layer already exists
latest: digest: sha256:13d7157f858b4a5e579cc12f717761a7251c773dfd70170250d9fd2c124b8419 size: 1990
+ set +x
✅ Docker image pushed successfully!
[Pipeline] }
[Pipeline] // withCredentials
[Pipeline] }
[Pipeline] // container
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Deploy to Kubernetes)
[Pipeline] echo
⏩ Deployment to the K8s cluster with Helm
[Pipeline] container
[Pipeline] {
[Pipeline] sh
+ helm upgrade --install flask-app helm/flask-app --namespace jenkins --create-namespace --set image.repository=evgeneys/flask-app --set image.tag=latest
Release "flask-app" has been upgraded. Happy Helming!
NAME: flask-app
LAST DEPLOYED: Mon Jul 21 17:17:09 2025
NAMESPACE: jenkins
STATUS: deployed
REVISION: 13
TEST SUITE: None
+ set +x
✅ Deployment completed successfully!
[Pipeline] }
[Pipeline] // container
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (App Verification)
[Pipeline] echo
⏩ Application verification
[Pipeline] container
[Pipeline] {
[Pipeline] sh
+ curl -s -w HTTPSTATUS:%{http_code} http://flask-app.jenkins.svc.cluster.local:5000/health
+ RESPONSE={"status":"OK"}
HTTPSTATUS:200
+ echo {"status":"OK"}
HTTPSTATUS:200
+ sed -e s/HTTPSTATUS:.*//
+ BODY={"status":"OK"}
+ echo {"status":"OK"}
HTTPSTATUS:200
+ tr -d 

+ sed -e s/.*HTTPSTATUS://
+ STATUS=200
+ [ 200 -eq 200 ]
+ set +x
✅ App Verification passed successfully!
📦 App response:
{"status":"OK"}
[Pipeline] }
[Pipeline] // container
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Declarative: Post Actions)
[Pipeline] echo
✅ Pipeline successed
[Pipeline] container
[Pipeline] {
[Pipeline] withCredentials
Masking supported pattern matches of $TG_BOT_TOKEN or $TG_CHAT_ID
[Pipeline] {
[Pipeline] sh
Warning: A secret was passed to "sh" using Groovy String interpolation, which is insecure.
		 Affected argument(s) used the following variable(s): [TG_BOT_TOKEN, TG_CHAT_ID]
		 See https://jenkins.io/redirect/groovy-string-interpolation for details.
+ curl -s -X POST https://api.telegram.org/bot****/sendMessage -d parse_mode=HTML -d chat_id=**** -d text=✅ Jenkins pipeline succeeded: 'Flask-app-deploy' #34
{"ok":true,"result":{"message_id":21,"from":{"id":7722043709,"is_bot":true,"first_name":"Jenkins notifier","username":"JenkinsNotifire_bot"},"chat":{"id":****,"first_name":"\u0415\u0432\u0433\u0435\u043d\u0438\u0439","username":"Jacksib","type":"private"},"date":1753118237,"text":"\u2705 Jenkins pipeline succeeded: 'Flask-app-deploy' #34"}}
[Pipeline] }
[Pipeline] // withCredentials
[Pipeline] }
[Pipeline] // container
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // container
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // node
[Pipeline] }
[Pipeline] // podTemplate
[Pipeline] End of Pipeline
Finished: SUCCESS
